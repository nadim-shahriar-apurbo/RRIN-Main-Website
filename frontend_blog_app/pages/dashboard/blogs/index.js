import { BsPostcard } from "react-icons/bs";
import { RiDeleteBin6Fill } from "react-icons/ri";
import { FaEdit } from "react-icons/fa";
import useFetchData from "@/hooks/useFetchData";
import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import Dataloading from "@/components/Dataloading";
import Aside from "@/components/Aside";
import { jwtDecode } from "jwt-decode";
import Head from "next/head";

export default function Blogs() {
    const router = useRouter();
    const [user, setUser] = useState({ value: null });
    const [author, setAuthor] = useState('');

    useEffect(() => {
        const checkUser = () => {
            try {
                const token = localStorage.getItem("Token");
                if (token) {
                    const JWTData = jwtDecode(token);
                    setAuthor(JWTData.data._id); // Set author from JWT
                    setUser(JWTData.data); // Set user data if needed
                } else {
                    router.push('/'); // Redirect if no token is found
                }
            } catch (err) {
                console.error(err);
                router.push('/'); // Redirect on error
            }
        };
        checkUser();
    }, [router]);

    const [currentPage, setCurrentPage] = useState(1);
    const [perPage] = useState(7);
    const [searchQuery, setSearchQuery] = useState('');
    const { alldata, loading } = useFetchData(`/api/blogs`);

    const paginate = (pageNumber) => {
        setCurrentPage(pageNumber);
    };

    const allblog = alldata.length; // Total number of blogs

    // Filter all data based on search query
    const filteredBlogs = searchQuery.trim() === '' ? alldata : alldata.filter(blog =>
        blog.title.toLowerCase().includes(searchQuery.toLowerCase())
    );

    // Calculate index of the first blog displayed on the current page
    const indexOfFirstblog = (currentPage - 1) * perPage;
    const indexOfLastblog = currentPage * perPage;

    // Get the current page's blogs
    const currentBlogs = filteredBlogs.slice(indexOfFirstblog, indexOfLastblog);
    const publishedblogs = currentBlogs.filter(ab => ab.author === author);

    const pageNumbers = [];
    for (let i = 1; i <= Math.ceil(allblog / perPage); i++) {
        pageNumbers.push(i);
    }

    if (user.value === null) {
        return null;
    }

    if (user.value !== null) {
        return (
            <>
                <Head>
                    <title>Your Blogs | RoboSuperior</title>
                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <Aside />
                <div className="p-[2rem] max-[1043px]:!m-0 blogpage">
                    <div className="titledashboard flex flex-sb">
                        <div data-aos="fade-right">
                            <h2 className="dark:!text-[#6466f1]">All Published<span className="dark:!text-gray-100"> Blogs</span></h2>
                            <h3 className="dark:text-[#6466f1]">ADMIN PANEL</h3>
                        </div>
                        <div className="breadcrumb dark:text-[#6466f1]" data-aos="fade-left">
                            <BsPostcard className="dark:text-[#6466f1]" /> <span className="dark:text-[#6466f1]">/</span><span><Link className="underline dark:text-[#6466f1]" href="/dashboard/blogs/addblog" >Add Blogs</Link></span>
                        </div>
                    </div>
                    <div className="blogstable mt-6">
                        <div className="flex gap-2 mb-4" data-aos="fade-left">
                            <h2 className="dark:text-gray-100">Search Blogs: </h2>
                            <input
                                type="text"
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                placeholder="Search by title..."
                                className="dark:text-gray-200 dark:bg-[#2d3748] p-2 rounded-md"
                            />
                        </div>

                        <table className="w-full table-auto border-collapse rounded-lg overflow-hidden shadow-lg dark:bg-[#2d3748]">
                            <thead className="bg-[#6466f1] text-white dark:bg-[#6466f1]">
                                <tr>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">#</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Title</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Slug</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Status</th>
                                    <th className="px-4 py-2 text-left border-b dark:bg-[#2d3748] dark:text-gray-100 dark:border-gray-200 shadow-lg">Edit / Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                {loading ? (
                                    <tr>
                                        <td colSpan="5" className="text-center py-4 dark:!bg-[#2d3748] dark:!text-gray-100">Loading...</td>
                                    </tr>
                                ) : (
                                    <>
                                        {publishedblogs.length === 0 ? (
                                            <tr>
                                                <td colSpan="5" className="text-center py-4 dark:!bg-[#2d3748] dark:!text-gray-100">No Blogs Available</td>
                                            </tr>
                                        ) : (
                                            publishedblogs.map((blog, index) => (
                                                <tr key={blog._id} className="border-b dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg">
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg">{indexOfFirstblog + index + 1}</td>
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg break-words">{blog.title}</td>
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg break-words">{blog.slug}</td>
                                                    <td className="px-4 py-2 border-r dark:bg-[#3a4964] dark:text-gray-100 dark:border-gray-200 shadow-lg">{blog.status || 'Draft'}</td>
                                                    <td className="px-4 py-2">
                                                        <div className="flex gap-2">
                                                            <Link href={`/dashboard/blogs/edit/${blog._id}`}>
                                                                <button className="dark:text-gray-100 dark:bg-[radial-gradient(black,transparent)] dark:hover:!bg-[#424f85] hover:!border-[#38457b]"><FaEdit /> Edit</button>
                                                            </Link>
                                                            <Link href={`/dashboard/blogs/delete/${blog._id}`}>
                                                                <button className="dark:text-gray-100 dark:bg-red-500"><RiDeleteBin6Fill /> Delete</button>
                                                            </Link>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                        )}
                                    </>
                                )}
                            </tbody>
                        </table>

                        {publishedblogs.length > 0 && (
                            <div className="blogpagination mt-4 flex justify-center gap-2">
                                <button onClick={() => paginate(currentPage - 1)} disabled={currentPage === 1} className="px-4 py-2 border rounded-md">Previous</button>
                                {pageNumbers.slice(Math.max(currentPage - 3, 0), Math.min(currentPage + 2, pageNumbers.length)).map(number => (
                                    <button
                                        key={number}
                                        onClick={() => paginate(number)}
                                        className={`px-4 py-2 border rounded-md ${currentPage === number ? 'bg-gray-300 dark:bg-gray-700' : ''}`}
                                    >
                                        {number}
                                    </button>
                                ))}
                                <button onClick={() => paginate(currentPage + 1)} disabled={currentBlogs.length < perPage} className="px-4 py-2 border rounded-md">Next</button>
                            </div>
                        )}
                    </div>
                </div>
            </>
        );
    }
}
